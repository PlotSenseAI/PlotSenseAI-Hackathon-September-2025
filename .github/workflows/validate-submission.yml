name: Validate Hackathon Submission

on:
  pull_request:
    branches:
      - submissions

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10.*"

      - name: Install dependencies
        run: |
          pip install -r templates/ml_requirements.txt || echo "ML track not found"
          pip install -r templates/dev_template/requirements.txt || echo "Dev track not found"
          pip install -e ./libs/plotsense
          pip install -r ./libs/plotsense/requirements.txt

      - name: Validate submission checklist & generate report
        run: |
          # Find the team folder name (first directory under submissions/)
          TEAM_FOLDER=$(find submissions -maxdepth 1 -type d -name '[!.]*' | head -n 1 | xargs basename)
          SUBMISSION="submissions/$TEAM_FOLDER"
          REPORT="submission_report.md"
          MISSING=0

          echo "# Submission Validation Report" > $REPORT
          echo "Team folder: $TEAM_FOLDER" >> $REPORT
          echo "Branch name: ${{ github.head_ref }}" >> $REPORT
          echo "" >> $REPORT

          # Debug: show what path we're checking
          echo "Checking submission path: $SUBMISSION" >> $REPORT
          echo "Current directory: $(pwd)" >> $REPORT
          echo "Listing submissions folder:" >> $REPORT
          ls -la submissions/ >> $REPORT 2>&1 || echo "No submissions folder" >> $REPORT
          echo "" >> $REPORT

          # Detect track from track.txt file
          TRACK=""
          if [ -f "$SUBMISSION/track.txt" ]; then
            TRACK=$(cat "$SUBMISSION/track.txt" | tr '[:lower:]' '[:upper:]' | tr -d '[:space:]')
            if [ "$TRACK" != "ML" ] && [ "$TRACK" != "DEV" ]; then
              echo "## Track Detection" >> $REPORT
              echo "❌ Invalid track specified in track.txt: '$TRACK'" >> $REPORT
              echo "" >> $REPORT
              echo "The track.txt file must contain either 'ML' or 'DEV' (case insensitive)" >> $REPORT
              MISSING=1
              echo "validation_failed=1" >> $GITHUB_ENV
              exit 0
            fi
          else
            echo "## Track Detection" >> $REPORT
            echo "❌ track.txt file missing" >> $REPORT
            echo "" >> $REPORT
            echo "Please create a track.txt file in your submission folder containing either:" >> $REPORT
            echo "- 'ML' (for Machine Learning track)" >> $REPORT  
            echo "- 'DEV' (for Development track)" >> $REPORT
            MISSING=1
            echo "validation_failed=1" >> $GITHUB_ENV
            exit 0
          fi

          echo "## Track Detection" >> $REPORT
          echo "✅ Detected as **${TRACK} Track** submission (from track.txt)" >> $REPORT
          echo "" >> $REPORT
          echo "## Checklist Validation" >> $REPORT

          ML_ITEMS=(
            "notebooks:folder:*.ipynb"
            "video-link.txt:file"
            "README.md:file"
            "docs:folder:*.md"
            "requirements.txt:file"
          )

          echo "### ML Track" >> $REPORT
          for ITEM in "${ML_ITEMS[@]}"; do
            NAME=$(echo $ITEM | cut -d: -f1)
            TYPE=$(echo $ITEM | cut -d: -f2)
            PATTERN=$(echo $ITEM | cut -d: -f3)

            if [ "$TYPE" == "folder" ]; then
              if [ -d "$SUBMISSION/$NAME" ] && [ "$(ls -A $SUBMISSION/$NAME/$PATTERN 2>/dev/null)" ]; then
                echo "- ✅ $NAME present with required files" >> $REPORT
              elif [ ! -d "$SUBMISSION/$NAME" ]; then
                echo "- ❌ $NAME folder missing (create folder and add $PATTERN files)" >> $REPORT
                MISSING=1
              else
                echo "- ❌ $NAME folder exists but no $PATTERN files found" >> $REPORT
                MISSING=1
              fi
            else
              if [ -f "$SUBMISSION/$NAME" ]; then
                echo "- ✅ $NAME present" >> $REPORT
              else
                echo "- ❌ $NAME missing" >> $REPORT
                MISSING=1
              fi
            fi
          done

          DEV_ITEMS=(
            "src:folder:*.py"
            "tests:folder:*"
            "docs:folder:*.md"
            "requirements.txt:file"
            "video-link.txt:file"
            "README.md:file"
          )

          echo "" >> $REPORT
          echo "### Dev Track" >> $REPORT
          for ITEM in "${DEV_ITEMS[@]}"; do
            NAME=$(echo $ITEM | cut -d: -f1)
            TYPE=$(echo $ITEM | cut -d: -f2)
            PATTERN=$(echo $ITEM | cut -d: -f3)

            if [ "$TYPE" == "folder" ]; then
              if [ -d "$SUBMISSION/$NAME" ] && [ "$(ls -A $SUBMISSION/$NAME/$PATTERN 2>/dev/null)" ]; then
                echo "- ✅ $NAME present with required files" >> $REPORT
              else
                echo "- ❌ $NAME missing or no $PATTERN files" >> $REPORT
                MISSING=1
              fi
            else
              if [ -f "$SUBMISSION/$NAME" ]; then
                echo "- ✅ $NAME present" >> $REPORT
              else
                echo "- ❌ $NAME missing" >> $REPORT
                MISSING=1
              fi
            fi
          done

          echo "" >> $REPORT
          if [ $MISSING -eq 0 ]; then
            echo "✅ All required files present!" >> $REPORT
          else
            echo "❌ Some files are missing. See details above." >> $REPORT
            echo "" >> $REPORT
            echo "### Quick Fix Guide:" >> $REPORT
            echo "1. Check which items are marked with ❌ above" >> $REPORT
            echo "2. Create the missing files/folders in your submission" >> $REPORT
            echo "3. Push your changes to trigger validation again" >> $REPORT
          fi
          
          # Store track and validation result for later steps
          echo "submission_track=$TRACK" >> $GITHUB_ENV
          echo "validation_failed=$MISSING" >> $GITHUB_ENV

      - name: Run tests (Dev track)
        continue-on-error: true
        if: env.submission_track == 'DEV'
        run: |
          TESTS="submissions/${GITHUB_HEAD_REF}/tests"
          if [ -d "$TESTS" ]; then
            echo "" >> submission_report.md
            echo "## Dev Track Test Results" >> submission_report.md
            pytest $TESTS --maxfail=1 --disable-warnings --tb=short || echo "- ❌ Some tests failed" >> submission_report.md
          else
            echo "" >> submission_report.md
            echo "## Dev Track Test Results" >> submission_report.md
            echo "- ⚠️ No tests folder found" >> submission_report.md
          fi

      - name: Run notebooks (ML track)
        continue-on-error: true
        if: env.submission_track == 'ML'
        run: |
          NOTEBOOKS="submissions/${GITHUB_HEAD_REF}/notebooks"
          if [ -d "$NOTEBOOKS" ]; then
            echo "" >> submission_report.md
            echo "## ML Track Notebook Execution" >> submission_report.md
            for nb in $NOTEBOOKS/*.ipynb; do
              jupyter nbconvert --to notebook --execute $nb --inplace && echo "- ✅ Notebook $(basename $nb) executed successfully" >> submission_report.md || echo "- ❌ Notebook $(basename $nb) failed" >> submission_report.md
            done
          else
            echo "" >> submission_report.md
            echo "## ML Track Notebook Execution" >> submission_report.md
            echo "- ⚠️ No notebooks folder found" >> submission_report.md
          fi

      - name: Upload submission report
        uses: actions/upload-artifact@v4
        with:
          name: submission-report
          path: submission_report.md

      - name: Comment validation results on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('submission_report.md', 'utf8');
            
            // Find existing bot comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('# Submission Validation Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }

      - name: Check overall status
        run: |
          if [ "${{ env.validation_failed }}" == "1" ]; then
              echo "❌ Submission checklist failed - check the PR comment for details"
              exit 1
          fi
          echo "✅ Submission validation passed"